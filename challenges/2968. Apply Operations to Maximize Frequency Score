function maxFrequencyScore(a: number[], k: number): number {
    const n = a.length;

    a.sort((x, y) => x - y);

    const pf: number[] = Array(n + 1).fill(0);
    for (let i = 1; i <= n; i++) {
      pf[i] = pf[i - 1] + a[i - 1];
    }

    const pred = (m: number): boolean => {
      let possible = false;
      for (let i = m; i <= n; i++) {
        if (m % 2 === 1) {
          let deviation = 0;
          const ind = i - Math.floor(m / 2);
          const median = a[ind - 1];
          const s1 = pf[ind] - pf[i - m];

          deviation += (median * (Math.floor(m / 2) + 1)) - s1;

          const s2 = pf[i] - pf[ind];
          deviation += s2 - median * Math.floor(m / 2);

          if (deviation <= k) {
            possible = true;
          }
        } else {
          let ind1 = i - Math.floor(m / 2);
          let median1 = a[ind1 - 1];
          let deviation1 = 0;

          deviation1 += (median1 * Math.floor(m / 2)) - (pf[ind1] - pf[i - m]);
          deviation1 += (pf[i] - pf[ind1]) - median1 * Math.floor(m / 2);

          if (deviation1 <= k) {
            possible = true;
          }

          let ind2 = i - Math.floor(m / 2) + 1;
          let median2 = a[ind2 - 1];
          let deviation2 = 0;

          deviation2 += (pf[i] - pf[ind2 - 1]) - (median2 * Math.floor(m / 2));
          deviation2 += (median2 * Math.floor(m / 2)) - (pf[ind2 - 1] - pf[i - m]);

          if (deviation2 <= k) {
            possible = true;
          }
        }

        if (possible) {
          break;
        }
      }

      return possible;
    };

    let l = 0;
    let r = n + 1;
    while (r - l > 1) {
      const m = Math.floor((l + r) / 2);
      if (pred(m)) {
        l = m;
      } else {
        r = m;
      }
    }

    return l;
  }
