class BIT {
    constructor(size) {
        this.n = size;
        this.tree = new Array(size + 2).fill(0);
    }

    update(i, val) {
        i++;
        while (i <= this.n) {
            this.tree[i] += val;
            i += i & -i;
        }
    }

    query(i) {
        i++;
        let res = 0;
        while (i > 0) {
            res += this.tree[i];
            i -= i & -i;
        }
        return res;
    }
}

var goodTriplets = function(nums1, nums2) {
    const n = nums1.length;
    const pos = Array(n);
    for (let i = 0; i < n; i++) {
        pos[nums2[i]] = i;
    }
    for (let i = 0; i < n; i++) {
        nums1[i] = pos[nums1[i]];
    }

    const bit1 = new BIT(n);
    const bit2 = new BIT(n);
    let ans = 0;

    for (let i = n - 1; i >= 0; i--) {
        const x = nums1[i];
        const val = bit1.query(n - 1) - bit1.query(x);
        const trip = bit2.query(n - 1) - bit2.query(x);
        ans += trip;
        bit2.update(x, val);
        bit1.update(x, 1);
    }

    return ans;
};
