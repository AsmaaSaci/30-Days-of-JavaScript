/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */

var waysToPartition = function(nums, k) {
    const n = nums.length;
    const s = Array(n);
    const left = new Map(), right = new Map();
    s[0] = nums[0];
    let ans = 0;

    for (let i = 1; i < n; i++) {
        s[i] = s[i - 1] + nums[i];
        right.set(s[i - 1], (right.get(s[i - 1]) || 0) + 1);
    }

    if (s[n - 1] % 2 === 0) {
        ans = (right.get(s[n - 1] / 2) || 0);
    }

    for (let i = 0; i < n; i++) {
        const d = k - nums[i];
        if ((s[n - 1] + d) % 2 === 0) {
            const t = (left.get((s[n - 1] + d) / 2) || 0) + (right.get((s[n - 1] - d) / 2) || 0);
            ans = Math.max(ans, t);
        }
        left.set(s[i], (left.get(s[i]) || 0) + 1);
        right.set(s[i], (right.get(s[i]) || 0) - 1);
    }

    return ans;
};
