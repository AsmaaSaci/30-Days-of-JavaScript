/**
 * @param {number[][]} points
 * @return {number}
 */
var maxPartitionFactor = function(points) {
    const n = points.length;
    if (n === 2) return 0;

    // Step 1: Build all (distance, i, j)
    const edges = [];
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            const d = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
            edges.push([d, i, j]);
        }
    }

    // Step 2: Sort edges by distance
    edges.sort((a, b) => a[0] - b[0]);

    // Step 3: Union-Find setup
    const parent = Array.from({ length: n }, (_, i) => i);
    const weight = Array(n).fill(1);

    const opp = new Map();

    // Step 4: Process edges
    for (const [d, i, j] of edges) {
        if (find(i) === find(j))
            return d;

        if (opp.has(i))
            union(opp.get(i), j);
        if (opp.has(j))
            union(opp.get(j), i);

        opp.set(i, j);
        opp.set(j, i);
    }

    return edges[edges.length - 1][0];

    // ----- Helper functions -----
    function find(a) {
        if (parent[a] !== a)
            parent[a] = find(parent[a]);
        return parent[a];
    }

    function union(x, y) {
        x = find(x);
        y = find(y);
        if (x === y) return;

        if (weight[x] < weight[y]) [x, y] = [y, x];
        weight[y] += weight[x];
        parent[x] = y;
    }
};
