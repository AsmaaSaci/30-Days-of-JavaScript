/////////////////////// Template /////////////////////////////
function DJSet(n) {
    let p = Array(n).fill(-1), s = Array(n).fill(0); // s: group prefix sum
    return { find, union, update, sum, par }
    function find(x) {
        return p[x] < 0 ? x : p[x] = find(p[x]);
    }
    function union(x, y) {
        x = find(x);
        y = find(y);
        if (x == y) return false;
        if (p[x] < p[y]) [x, y] = [y, x];
        p[x] += p[y];
        p[y] = x;
        s[x] += s[y];
        return true;
    }
    function update(idx, v) {
        s[idx] = v;
        // s[idx] += v;
    }
    function sum() {
        return s;
    }
    function par() {
        return p;
    }
}
////////////////////////////////////////////////////////////

const maximumSegmentSum = (a, b) => {
    let n = a.length, res = [0], ds = new DJSet(n), used = new Set(), max = 0;
    for (let i = n - 1; i >= 1; i--) {
        used.add(b[i]);
        ds.update(b[i], a[b[i]]);
        if (used.has(b[i] - 1)) ds.union(b[i], b[i] - 1);
        if (used.has(b[i] + 1)) ds.union(b[i], b[i] + 1);
        max = Math.max(max, ds.sum()[ds.find([b[i]])]);
        res.push(max);
    }
    return res.reverse();
};
