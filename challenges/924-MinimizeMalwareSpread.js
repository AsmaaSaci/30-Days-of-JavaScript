var minMalwareSpread = function(graph, initial) {
    const n = graph.length;
    const parent = Array.from({length:n}, (_,i)=>i);
    const size = Array(n).fill(1);

    const find = x => parent[x]===x ? x : (parent[x]=find(parent[x]));
    const union = (a,b) => {
        a=find(a); b=find(b);
        if(a!==b){
            if(size[a]<size[b]) [a,b]=[b,a];
            parent[b]=a;
            size[a]+=size[b];
        }
    };

    for(let i=0;i<n;i++){
        for(let j=i+1;j<n;j++){
            if(graph[i][j]===1) union(i,j);
        }
    }

    const infectedCount = Array(n).fill(0);
    for(let node of initial){
        infectedCount[find(node)]++;
    }

    initial.sort((a,b)=>a-b);
    let res = initial[0], maxSaved = -1;
    for(let node of initial){
        const root=find(node);
        if(infectedCount[root]===1){
            if(size[root]>maxSaved || (size[root]===maxSaved && node<res)){
                maxSaved=size[root];
                res=node;
            }
        }
    }
    return res;
};
